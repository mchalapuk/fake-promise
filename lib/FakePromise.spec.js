// Generated by CoffeeScript 1.12.7
(function() {
  var FakePromise, sinon;

  sinon = require("sinon");

  FakePromise = require("./FakePromise")["default"];

  describe("FakePromise", function() {
    var testedPromise;
    testedPromise = null;
    beforeEach(function() {
      return testedPromise = new FakePromise;
    });
    describe("just after creation", function() {
      var errorTests;
      errorTests = [["resolve", ".resolve(...) called without any callback specified"], ["reject", ".reject(...) called without any callback specified"]];
      return errorTests.forEach(function(params) {
        var expectedError, methodName;
        methodName = params[0], expectedError = params[1];
        return it("throws new Error('" + expectedError + "') when calling ." + methodName + "(...)", function() {
          return (should(function() {
            return testedPromise[methodName](null);
          }))["throw"](new Error(expectedError));
        });
      });
    });
    return describe("when after .then() specified", function() {
      var thenCallback;
      thenCallback = null;
      beforeEach(function() {
        thenCallback = sinon.spy();
        return testedPromise.then(thenCallback);
      });
      return describe("and after calling .resolve(arg)", function() {
        var arg;
        arg = "promises, promises";
        beforeEach(function() {
          return testedPromise.resolve(arg);
        });
        return it("calls proper callback", function() {
          return thenCallback.have.callCount(1);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=FakePromise.spec.js.map
