// Generated by CoffeeScript 1.12.7
(function() {
  var FakePromise, sinon;

  sinon = require("sinon");

  FakePromise = require("./FakePromise")["default"];

  describe("FakePromise", function() {
    var testedPromise;
    testedPromise = null;
    beforeEach(function() {
      testedPromise = new FakePromise;
      return void 0;
    });
    describe("just after creation", function() {
      var errorTests;
      errorTests = [["resolve", ".resolve(...) called without .then(...) callback specified"], ["reject", ".reject(...) called without .then(...) callback specified"]];
      return errorTests.forEach(function(params) {
        var expectedError, methodName;
        methodName = params[0], expectedError = params[1];
        return it("throws new Error('" + expectedError + "') when calling ." + methodName + "(...)", function() {
          return (should(function() {
            return testedPromise[methodName](null);
          }))["throw"](new Error(expectedError));
        });
      });
    });
    describe("when after .then(onfulfilled) specified", function() {
      var thenCallback;
      thenCallback = null;
      beforeEach(function() {
        thenCallback = sinon.spy();
        testedPromise.then(thenCallback);
        return void 0;
      });
      describe("and after calling .resolve(arg)", function() {
        var arg;
        arg = "I will behave";
        beforeEach(function() {
          return testedPromise.resolve(arg);
        });
        it("calls proper callback", function() {
          return thenCallback.should.have.callCount(1);
        });
        return it("passes result to callback", function() {
          return thenCallback.should.have.been.calledWith(arg);
        });
      });
      return describe("and after .catch(onrejected) specified", function() {
        var catchCallback;
        catchCallback = null;
        beforeEach(function() {
          catchCallback = sinon.spy();
          testedPromise["catch"](catchCallback);
          return void 0;
        });
        return describe("and after calling .reject(err)", function() {
          var err;
          err = new Error("I will never promise again");
          beforeEach(function() {
            return testedPromise.reject(err);
          });
          it("calls proper callback", function() {
            return catchCallback.should.have.callCount(1);
          });
          return it("passes result to callback", function() {
            return catchCallback.should.have.been.calledWith(err);
          });
        });
      });
    });
    return describe("when after .then(onfulfilled, onrejected) specified", function() {
      var catchCallback, thenCallback;
      thenCallback = null;
      catchCallback = null;
      beforeEach(function() {
        thenCallback = sinon.spy();
        catchCallback = sinon.spy();
        testedPromise.then(thenCallback, catchCallback);
        return void 0;
      });
      describe("and after calling .resolve(arg)", function() {
        var arg;
        arg = "I will clean my room";
        beforeEach(function() {
          return testedPromise.resolve(arg);
        });
        it("calls proper callback", function() {
          return thenCallback.should.have.callCount(1);
        });
        return it("passes result to callback", function() {
          return thenCallback.should.have.been.calledWith(arg);
        });
      });
      return describe("and after calling .reject(err)", function() {
        var err;
        err = new Error("I will fulfill all promises");
        beforeEach(function() {
          return testedPromise.reject(err);
        });
        it("calls proper callback", function() {
          return catchCallback.should.have.callCount(1);
        });
        return it("passes result to callback", function() {
          return catchCallback.should.have.been.calledWith(err);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=FakePromise.spec.js.map
