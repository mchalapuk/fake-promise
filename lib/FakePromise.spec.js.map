{
  "version": 3,
  "file": "FakePromise.spec.js",
  "sourceRoot": "..",
  "sources": [
    "src/FakePromise.spec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nsinon = require \"sinon\"\n\nFakePromise = require \"./FakePromise\"\n  .default\n\ndescribe \"FakePromise\", ->\n  testedPromise = null\n\n  [ null, undefined ].forEach (arg) ->\n    it \"calling static .reject(#{arg}) throws\", ->\n      should -> FakePromise.reject arg\n        .throw \"error must not be undefined nor null\"\n\n  describe \"when constructed with Promise.reject(error)\", ->\n    expectedError = new Error \"test\"\n\n    beforeEach ->\n      testedPromise = FakePromise.reject expectedError\n      undefined\n\n    it \"calling .setError(...) again throws an error\", ->\n      should -> testedPromise.setError expectedError\n        .throw /error already set.*/\n    it \"calling .reject(error) throws an error\", ->\n      should -> testedPromise.reject expectedError\n        .throw /error already set.*/\n    it \"calling .rejectOne(error) throws an error\", ->\n      should -> testedPromise.rejectOne expectedError\n        .throw /error already set.*/\n    it \"calling .reject() throws an error\", ->\n      should -> testedPromise.reject()\n        .throw /promise already rejected.*/\n    it \"calling .rejectOne() throws an error\", ->\n      should -> testedPromise.rejectOne()\n        .throw /promise already rejected.*/\n    it \"calling .setResult(...) throws an error\", ->\n      should -> testedPromise.setResult {}\n        .throw /trying to set result on a promise with error already set.*/\n    it \"calling .resolve() throws an error\", ->\n      should () -> testedPromise.resolve()\n        .throw /trying to resolve a promise containing error.*/\n    it \"calling .resolveOne() throws an error\", ->\n      should () -> testedPromise.resolveOne()\n        .throw /trying to resolve a promise containing error.*/\n\n    it \"resolves full promise chain\", ->\n      testedPromise\n        .catch (err) ->\n          err.should.equal expectedError\n          err\n        .then (err) ->\n          err.should.equal expectedError\n          throw err\n        .then(\n          (result) -> throw new Error \"expected rejection\"\n          (err) -> err.should.equal expectedError\n        )\n\n    it \"forwards the error to next promise in chain\", ->\n      testedPromise\n        .then (result) ->\n          throw new Error \"expected rejection got result: #{result}\"\n        .then(\n          (result) -> throw new Error \"expected rejection got result: #{result}\"\n          (err) -> err.should.equal expectedError\n        )\n\n  describe \"when constructed with Promise.resolve(result)\", ->\n    expectedResult = result: \"test\"\n\n    beforeEach ->\n      testedPromise = FakePromise.resolve expectedResult\n      undefined\n\n    it \"calling .setError(...) again throws an error\", ->\n      should -> testedPromise.setError new Error \"test\"\n        .throw /trying to set error on a promise with result already set.*/\n    it \"calling .reject(error) throws an error\", ->\n      should -> testedPromise.reject new Error \"test\"\n        .throw /trying to reject a promise containing result.*/\n    it \"calling .rejectOne(error) throws an error\", ->\n      should -> testedPromise.rejectOne new Error \"test\"\n        .throw /trying to reject a promise containing result.*/\n    it \"calling .reject() throws an error\", ->\n      should -> testedPromise.reject()\n        .throw /trying to reject a promise containing result.*/\n    it \"calling .rejectOne() throws an error\", ->\n      should -> testedPromise.rejectOne()\n        .throw /trying to reject a promise containing result.*/\n    it \"calling .setResult(...) throws an error\", ->\n      should -> testedPromise.setResult {}\n        .throw /result already set.*/\n    it \"calling .resolve() throws an error\", ->\n      should () -> testedPromise.resolve()\n        .throw /promise already resolved.*/\n    it \"calling .resolveOne() throws an error\", ->\n      should () -> testedPromise.resolveOne()\n        .throw /promise already resolved.*/\n\n    it \"resolves full promise chain\", ->\n      error = new Error \"error\"\n\n      testedPromise\n        .then (result) ->\n          result.should.equal expectedResult\n          throw error\n        .catch (err) ->\n          err.should.equal error\n          err\n        .catch(\n          (result) -> throw new Error \"expected rejection got result: #{result}\"\n          (err) -> err.should.equal error\n        )\n\n    it \"forwards the result to next promise in chain\", ->\n      testedPromise\n        .catch (err) ->\n          throw err\n        .then (result) ->\n          result.should.equal expectedResult\n\n  describe \"when instantiated with new\", ->\n    beforeEach ->\n      testedPromise = new FakePromise\n      undefined\n\n    [ 'setError', 'reject', 'rejectOne' ].forEach (methodName) ->\n      [ null, undefined ].forEach (arg) ->\n        it \"calling .#{methodName}(#{arg}) throws\", ->\n          should -> testedPromise[methodName] arg\n            .throw \"error must not be undefined nor null\"\n\n    describe \"when after calling .resolve(result)\", ->\n      expectedResult = {}\n\n      beforeEach ->\n        testedPromise.resolve expectedResult\n\n      it \"resolves full promise chain\", ->\n        error = new Error \"test\"\n\n        testedPromise\n          .then (result) ->\n            result.should.equal expectedResult\n            throw error\n          .catch (err) ->\n            err.should.equal error\n            expectedResult\n          .then (result) ->\n            (should result).equal expectedResult\n            throw error\n          .then(\n            (result) -> throw new Error \"expected rejection\"\n            (err) -> err.should.equal error\n          )\n\n    describe \"when after calling .reject(error)\", ->\n      expectedError = new Error \"test\"\n\n      beforeEach ->\n        testedPromise.reject expectedError\n\n      it \"resolves full promise chain\", ->\n        testedPromise\n          .catch (err) ->\n            err.should.equal expectedError\n          .then ->\n            throw expectedError\n          .then(\n            (result) -> throw new Error \"expected rejection\"\n            (err) -> err.should.equal expectedError\n          )\n\n    describe \"when after calling .resolve(resultPromise)\", ->\n      resultPromise = null\n\n      beforeEach ->\n        resultPromise = new FakePromise\n        testedPromise.resolve resultPromise\n\n      it \"throws when calling .setResult\", ->\n        should -> testedPromise.setResult {}\n          .throw /result already set \\(waiting for promise\\).*/\n      it \"throws when calling .setError\", ->\n        should -> testedPromise.setError {}\n          .throw /result already set \\(waiting for promise\\).*/\n      it \"throws when calling .resolve\", ->\n        should -> testedPromise.resolve {}\n          .throw /result already set \\(waiting for promise\\).*/\n      it \"throws when calling .reject\", ->\n        should -> testedPromise.reject {}\n          .throw /result already set \\(waiting for promise\\).*/\n      it \"throws when calling .resolveOne\", ->\n        should -> testedPromise.resolveOne {}\n          .throw /result already set \\(waiting for promise\\).*/\n      it \"throws when calling .rejectOne\", ->\n        should -> testedPromise.rejectOne {}\n          .throw /result already set \\(waiting for promise\\).*/\n\n      describe \"and after resolving resultPromise\", ->\n        expectedResult = {}\n\n        beforeEach ->\n          resultPromise.resolve expectedResult\n\n        it \"resolves the promise\", ->\n          testedPromise.then (result) ->\n            result.should.equal expectedResult\n\n    describe \"when after calling .resolveOne(null)\", ->\n      nextPromise = null\n\n      beforeEach ->\n        nextPromise = testedPromise.resolveOne null\n        undefined\n\n      it \"calling .then(callback) calls the callback immediately\", ->\n        callback = sinon.spy()\n        testedPromise.then callback\n        callback.should.have.callCount 1\n          .and.have.been.calledWith null\n\n      it \"calling .catch(callback) does nothing\", ->\n        callback = sinon.spy()\n        testedPromise.catch callback\n        callback.should.have.callCount 0\n\n      describe \"and after calling .resolveOne(null).resolveOne()\", ->\n        beforeEach ->\n          nextPromise.resolveOne()\n          undefined\n\n        it \"calling .then(passThrough).then(callback) calls the callback immediately\", ->\n          callback = sinon.spy()\n          testedPromise\n            .then (arg) -> arg\n            .then callback\n          callback.should.have.callCount 1\n            .and.have.been.calledWith null\n\n    describe \"when after .resolveOne() without result\", ->\n      nextPromise = null\n\n      beforeEach ->\n        nextPromise = testedPromise.resolveOne()\n        undefined\n\n      describe \"and after calling .setResult(result)\", ->\n        result = \"result\"\n\n        beforeEach ->\n          testedPromise.setResult result\n\n        it \"calling .then(callback) calls the callback immediately\", ->\n          callback = sinon.spy()\n          testedPromise.then callback\n          callback.should.have.callCount 1\n            .and.have.been.calledWith result\n\n        it \"calling .catch(callback) does nothing\", ->\n          callback = sinon.spy()\n          testedPromise.catch callback\n          callback.should.have.callCount 0\n\n    describe \"when after .resolveOne() with resolved promise as result\", ->\n      nextPromise = null\n      result = \"result\"\n\n      beforeEach ->\n        resultPromise = new FakePromise\n        resultPromise.resolveOne result\n        nextPromise = testedPromise.resolveOne resultPromise\n        undefined\n\n      it \"calling .then(callback) calls the callback immediately\", ->\n        callback = sinon.spy()\n        testedPromise.then callback\n        callback.should.have.callCount 1\n          .and.have.been.calledWith result\n\n      it \"calling .catch(callback) does nothing\", ->\n        callback = sinon.spy()\n        testedPromise.catch callback\n        callback.should.have.callCount 0\n\n    describe \"when after .resolveOne() with rejected promise as result\", ->\n      nextPromise = null\n      error = new Error \"rejected\"\n\n      beforeEach ->\n        resultPromise = new FakePromise\n        resultPromise.rejectOne error\n        nextPromise = testedPromise.resolveOne resultPromise\n        undefined\n\n      it \"calling .catch(callback) calls the callback immediately\", ->\n        callback = sinon.spy()\n        testedPromise.catch callback\n        callback.should.have.callCount 1\n          .and.have.been.calledWith error\n\n      it \"calling .then(callback) does nothing\", ->\n        callback = sinon.spy()\n        testedPromise.then callback\n        callback.should.have.callCount 0\n\n    describe \"when after calling .rejectOne(error)\", ->\n      error = new Error \"test\"\n      nextPromise = null\n\n      beforeEach ->\n        nextPromise = testedPromise.rejectOne error\n        undefined\n\n      it \"calling .catch(callback) calls the callback immediately\", ->\n        callback = sinon.spy()\n        testedPromise.catch callback\n        callback.should.have.callCount 1\n          .and.have.been.calledWith error\n\n      it \"calling .then(callback) does nothing\", ->\n        callback = sinon.spy()\n        testedPromise.then callback\n        callback.should.have.callCount 0\n\n      describe \"and after calling .catch(rethrow)\", ->\n        nextPromise = null\n\n        beforeEach ->\n          nextPromise = testedPromise.catch (me) -> throw me\n          undefined\n\n        describe \"and after calling .rejectOne(error).rejectOne()\", ->\n          beforeEach ->\n            nextPromise.rejectOne()\n            undefined\n\n          it \"calling .catch(callback) calls the callback immediately\", ->\n            callback = sinon.spy()\n            nextPromise.catch callback\n            callback.should.have.callCount 1\n              .and.have.been.calledWith error\n\n    describe \"when after .then(onfulfilled) specified\", ->\n      thenCallback = null\n      nextPromise = null\n\n      beforeEach ->\n        thenCallback = sinon.spy()\n        nextPromise = testedPromise.then thenCallback\n        undefined\n\n      it \"throws calling .then(...) second time\", ->\n        should -> testedPromise.then thenCallback\n          .throw /promise already specified.*/\n      it \"throws calling .catch(...) on the same promise\", ->\n        should -> testedPromise.catch thenCallback\n          .throw /promise already specified.*/\n\n      it \".setResult(undefined).resolveOne() doesn't throw\", ->\n        testedPromise.setResult undefined\n        testedPromise.resolveOne()\n        undefined\n\n      describe \"and after calling .resolveOne(arg)\", ->\n        arg = \"I will behave\"\n\n        beforeEach ->\n          testedPromise.resolveOne arg\n          undefined\n\n        it \"calls proper callback\", ->\n          thenCallback.should.have.callCount 1\n        it \"passes result to callback\", ->\n          thenCallback.should.have.been.calledWith arg\n\n      describe \"and after .catch(onrejected) specified on returned promise\", ->\n        catchCallback = null\n\n        beforeEach ->\n          catchCallback = sinon.spy()\n          nextPromise.catch catchCallback\n          undefined\n\n        describe \"and after calling .rejectOne(err).rejectOne()\", ->\n          err = new Error \"I will never promise again\"\n\n          beforeEach ->\n            testedPromise.rejectOne err\n              .rejectOne()\n            undefined\n\n          it \"calls proper callback\", ->\n            catchCallback.should.have.callCount 1\n          it \"passes error to callback\", ->\n            catchCallback.should.have.been.calledWith err\n\n    describe \"when after .then(onfulfilled, onrejected) specified\", ->\n      thenCallback = null\n      catchCallback = null\n\n      beforeEach ->\n        thenCallback = sinon.spy()\n        catchCallback = sinon.spy()\n        testedPromise.then thenCallback, catchCallback\n        undefined\n\n      describe \"and after calling .resolveOne(arg)\", ->\n        arg = \"I will clean my room\"\n\n        beforeEach ->\n          testedPromise.resolveOne arg\n          undefined\n\n        it \"calls proper callback\", ->\n          thenCallback.should.have.callCount 1\n        it \"passes result to callback\", ->\n          thenCallback.should.have.been.calledWith arg\n\n      describe \"and after calling .rejectOne(err)\", ->\n        err = new Error \"I will fulfill all promises\"\n\n        beforeEach ->\n          testedPromise.rejectOne err\n          undefined\n\n        it \"calls proper callback\", ->\n          catchCallback.should.have.callCount 1\n        it \"passes error to callback\", ->\n          catchCallback.should.have.been.calledWith err\n\n    describe \"when after .then(passThrough).then(onfulfilled) specified\", ->\n      thenCallback = null\n\n      beforeEach ->\n        thenCallback = sinon.spy()\n        testedPromise\n          .then (arg) -> arg\n          .then thenCallback\n        undefined\n\n      describe \"and after calling .resolveOne(arg).resolveOne()\", ->\n        arg = \"I will behave\"\n\n        beforeEach ->\n          testedPromise.resolveOne arg\n            .resolveOne()\n          undefined\n\n        it \"calls proper callback\", ->\n          thenCallback.should.have.callCount 1\n        it \"passes result to callback\", ->\n          thenCallback.should.have.been.calledWith arg\n\n    describe \"when after .then(returnResolvedPromise).then(onfulfilled) specified\", ->\n      thenCallback = null\n\n      beforeEach ->\n        thenCallback = sinon.spy()\n        resultPromise = new FakePromise\n        testedPromise\n          .then (arg) ->\n            resultPromise.resolveOne arg\n            resultPromise\n          .then thenCallback\n        undefined\n\n      describe \"and after calling .resolveOne(arg).resolveOne()\", ->\n        arg = \"I will behave\"\n\n        beforeEach ->\n          testedPromise.resolveOne arg\n            .resolveOne()\n          undefined\n\n        it \"calls proper callback\", ->\n          thenCallback.should.have.callCount 1\n        it \"passes result to callback\", ->\n          thenCallback.should.have.been.calledWith arg\n\n    describe \"when after .then(returnRejectedPromise).catch(onfulfilled) specified\", ->\n      catchCallback = null\n\n      beforeEach ->\n        catchCallback = sinon.spy()\n        testedPromise\n          .then (arg) ->\n            resultPromise = new FakePromise\n            resultPromise.rejectOne arg\n            resultPromise\n          .catch catchCallback\n        undefined\n\n      describe \"and after calling .resolveOne(arg).resolveOne()\", ->\n        arg = \"I will behave\"\n\n        beforeEach ->\n          testedPromise.resolveOne arg\n            .rejectOne()\n          undefined\n\n        it \"calls proper callback\", ->\n          catchCallback.should.have.callCount 1\n        it \"passes result to callback\", ->\n          catchCallback.should.have.been.calledWith arg\n\n    describe \"when after .catch(rethrow).catch(onrejected) specified\", ->\n      catchCallback = null\n\n      beforeEach ->\n        catchCallback = sinon.spy()\n        testedPromise\n          .catch (err) -> throw err\n          .catch catchCallback\n        undefined\n\n      describe \"and after calling .rejectOne(arg).rejectOne()\", ->\n        err = new Error \"This promise is a fake one\"\n\n        beforeEach ->\n          testedPromise.rejectOne err\n            .rejectOne()\n          undefined\n\n        it \"calls proper callback\", ->\n          catchCallback.should.have.callCount 1\n        it \"passes error to callback\", ->\n          catchCallback.should.have.been.calledWith err\n\n    describe \"when after .catch(returnRejectedPromise).catch(onrejected) specified\", ->\n      catchCallback = null\n\n      beforeEach ->\n        catchCallback = sinon.spy()\n        testedPromise\n          .catch (err) ->\n            resultPromise = new FakePromise\n            resultPromise.rejectOne err\n            resultPromise\n          .catch catchCallback\n        undefined\n\n      describe \"and after calling .rejectOne(arg).rejectOne()\", ->\n        err = new Error \"This promise is a fake one\"\n\n        beforeEach ->\n          testedPromise.rejectOne err\n            .rejectOne()\n          undefined\n\n        it \"calls proper callback\", ->\n          catchCallback.should.have.callCount 1\n        it \"passes error to callback\", ->\n          catchCallback.should.have.been.calledWith err\n\n    describe \"when after .catch(returnResolvedPromise).then(onrejected) specified\", ->\n      thenCallback = null\n\n      beforeEach ->\n        thenCallback = sinon.spy()\n        resultPromise = new FakePromise\n        testedPromise\n          .catch (err) ->\n            resultPromise.resolveOne err.message\n            resultPromise\n          .then thenCallback\n        undefined\n\n      describe \"and after calling .rejectOne(arg).resolveOne()\", ->\n        err = \"This promise is a fake one\"\n\n        beforeEach ->\n          testedPromise.rejectOne new Error err\n            .resolveOne()\n          undefined\n\n        it \"calls proper callback\", ->\n          thenCallback.should.have.callCount 1\n        it \"passes error to callback\", ->\n          thenCallback.should.have.been.calledWith err\n\n    describe \"when after .setResult(result) called\", ->\n      expectedResult = {}\n\n      beforeEach ->\n        testedPromise.setResult expectedResult\n\n      it \"calling .setResult(...) again throws an error\", ->\n        should -> testedPromise.setResult expectedResult\n          .throw /result already set.*/\n      it \"calling .resolve(result) throws an error\", ->\n        should -> testedPromise.resolve expectedResult\n          .throw /result already set.*/\n      it \"calling .resolveOne(result) throws an error\", ->\n        should -> testedPromise.resolveOne expectedResult\n          .throw /result already set.*/\n      it \"calling .setError(...) throws an error\", ->\n        should -> testedPromise.setError new Error 'test'\n          .throw /trying to set error on a promise with result already set.*/\n      it \"calling .reject() throws an error\", ->\n        should -> testedPromise.reject()\n          .throw /trying to reject a promise containing result.*/\n      it \"calling .rejectOne() throws an error\", ->\n        should -> testedPromise.rejectOne()\n          .throw /trying to reject a promise containing result.*/\n\n      it \"calling .resolve() does not throw\", ->\n        testedPromise.resolve()\n        testedPromise.then (result) -> result.should.eql expectedResult\n      it \"calling .resolveOne() does not throw\", ->\n        testedPromise.resolveOne().resolveOne()\n        testedPromise.then (result) -> result.should.eql expectedResult\n\n    describe \"when after .setResult(resolvedPromise) called\", ->\n      expectedResult = {}\n\n      beforeEach ->\n        resultPromise = new FakePromise\n        resultPromise.resolve expectedResult\n        testedPromise.setResult resultPromise\n\n      it \"calling .setResult(...) again throws an error\", ->\n        should -> testedPromise.setResult expectedResult\n          .throw /result already set.*/\n      it \"calling .resolve(result) throws an error\", ->\n        should -> testedPromise.resolve expectedResult\n          .throw /result already set.*/\n      it \"calling .resolveOne(result) throws an error\", ->\n        should -> testedPromise.resolveOne expectedResult\n          .throw /result already set.*/\n      it \"calling .setError(...) throws an error\", ->\n        should -> testedPromise.setError new Error 'test'\n          .throw /trying to set error on a promise with result already set.*/\n      it \"calling .reject() throws an error\", ->\n        should -> testedPromise.reject()\n          .throw /trying to reject a promise containing result.*/\n      it \"calling .rejectOne() throws an error\", ->\n        should -> testedPromise.rejectOne()\n          .throw /trying to reject a promise containing result.*/\n\n      it \"calling .resolve() does not throw\", ->\n        testedPromise.resolve()\n        testedPromise.then (result) -> result.should.eql expectedResult\n      it \"calling .resolveOne() does not throw\", ->\n        testedPromise.resolveOne().resolveOne()\n        testedPromise.then (result) -> result.should.eql expectedResult\n\n    describe \"when after .setError(error) called\", ->\n      expectedError = new Error \"test\"\n\n      beforeEach ->\n        testedPromise.setError expectedError\n\n      it \"calling .setError(...) again throws an error\", ->\n        should -> testedPromise.setError expectedError\n          .throw /error already set.*/\n      it \"calling .reject(error) throws an error\", ->\n        should -> testedPromise.reject expectedError\n          .throw /error already set.*/\n      it \"calling .rejectOne(error) throws an error\", ->\n        should -> testedPromise.rejectOne expectedError\n          .throw /error already set.*/\n      it \"calling .setError(...) throws an error\", ->\n        should -> testedPromise.setResult {}\n          .throw /trying to set result on a promise with error already set.*/\n      it \"calling .resolve() throws an error\", ->\n        should () -> testedPromise.resolve()\n          .throw /trying to resolve a promise containing error.*/\n      it \"calling .resolveOne() throws an error\", ->\n        should () -> testedPromise.resolveOne()\n          .throw /trying to resolve a promise containing error.*/\n\n      it \"calling .rejectOne() does not throw\", ->\n        testedPromise.rejectOne().resolveOne()\n        testedPromise.then(\n          -> throw new Error \"expected rejection\"\n          (error) -> error.should.eql expectedError\n        )\n      it \"calling .reject() does not throw\", ->\n        testedPromise.reject()\n        testedPromise.then(\n          -> throw new Error \"expected rejection\"\n          (error) -> error.should.eql expectedError\n        )\n\n    describe \"when after .setResult(rejectedPromise) called\", ->\n      expectedError = new Error \"test\"\n\n      beforeEach ->\n        resultPromise = new FakePromise\n        resultPromise.reject expectedError\n        testedPromise.setResult resultPromise\n\n      it \"calling .setError(...) again throws an error\", ->\n        should -> testedPromise.setError expectedError\n          .throw /error already set.*/\n      it \"calling .reject(error) throws an error\", ->\n        should -> testedPromise.reject expectedError\n          .throw /error already set.*/\n      it \"calling .rejectOne(error) throws an error\", ->\n        should -> testedPromise.rejectOne expectedError\n          .throw /error already set.*/\n      it \"calling .setError(...) throws an error\", ->\n        should -> testedPromise.setResult {}\n          .throw /trying to set result on a promise with error already set.*/\n      it \"calling .resolve() throws an error\", ->\n        should () -> testedPromise.resolve()\n          .throw /trying to resolve a promise containing error.*/\n      it \"calling .resolveOne() throws an error\", ->\n        should () -> testedPromise.resolveOne()\n          .throw /trying to resolve a promise containing error.*/\n\n      it \"calling .reject() does not throw\", ->\n        testedPromise.reject()\n        testedPromise.then(\n          -> throw new Error \"expected rejection\"\n          (error) -> error.should.eql expectedError\n        )\n      it \"calling .rejectOne() does not throw\", ->\n        testedPromise.rejectOne().resolveOne()\n        testedPromise.then(\n          -> throw new Error \"expected rejection\"\n          (error) -> error.should.eql expectedError\n        )\n\n    describe \"when after calling .setResult(undefined)\", ->\n      expectedResult = undefined\n\n      beforeEach ->\n        testedPromise.setResult expectedResult\n\n      it \"calling .resolveOne() and .then() resolves the promise\", ->\n        testedPromise.resolveOne().resolveOne()\n        testedPromise.then (result) -> (should result).equal expectedResult\n      it \"calling .resolve() and .then() resolves the promise\", ->\n        testedPromise.resolve()\n        testedPromise.then (result) -> (should result).equal expectedResult\n\n    describe \"when without calling .setResult()\", ->\n      expectedResult = undefined\n\n      it \"calling .resolveOne() and .then() resolves the promise\", ->\n        testedPromise.resolveOne().resolveOne()\n        testedPromise.then (result) -> (should result).equal expectedResult\n      it \"calling .resolve() and .then() resolves the promise\", ->\n        testedPromise.resolve()\n        testedPromise.then (result) -> (should result).equal expectedResult\n\nclass LoggingProxyHandler\n  constructor: ->\n    @indent = 0\n\n  construct: (Target, args) ->\n    @log Target, \"construct\".yellow, \"#{Target.name}(#{(args.map stringifyArg).join \", \" })\"\n    @indent += 1\n    try\n      instance = new Target\n      proxy = new Proxy instance, @\n    catch e\n      @log Target, \"throw\".red, stringifyArg e\n      @indent -= 1\n      throw e\n    @log Target, \"return\".green, stringifyArg instance\n    @indent -= 1\n    proxy\n  apply: (target, thisArg, args) ->\n    @log target, \"call\".yellow, \"#{target.name}(#{(args.map stringifyArg).join \", \" })\"\n    @indent += 1\n    try\n      result = target.apply thisArg, args\n    catch e\n      @log target, \"throw\".red, stringifyArg e\n      @indent -= 1\n      throw e\n    @log target, \"return\".green, stringifyArg result\n    @indent -= 1\n    result\n  get: (target, property, receiver) ->\n    try\n      value = target[property]\n      if property in [\"id\", \"nextPromise\"]\n        return value\n      @log target, \"get\".blue, \"#{property} -> #{stringifyArg value}\"\n      if typeof value is \"function\"\n        value.id = target.id\n        new Proxy value, @\n      else\n        value\n    catch e\n      @log target, \"get\".red, \"#{property} -> throw #{stringifyArg e}\"\n      throw e\n  set: (target, property, value, receiver) ->\n    try\n      previous = target[property]\n      @log target, \"set\".magenta, \"#{property} = #{stringifyArg value}\"\n      if property is \"nextPromise\"\n        value = new Proxy value, @\n      target[property] = value\n      true\n    catch e\n      @log target, \"set\".red, \"#{property} = #{stringify value} -> throw #{stringifyArg e}\"\n      throw e\n  log: (target, operation, args) ->\n    console.log \"#{@printIndent()}#{if target.id then \"##{target.id} \".gray else \"\"}#{operation} #{if args then args.gray else \"\"}\"\n  printIndent: ->\n    \"                                                             \".substring 0, @indent * 2\n\nRawFakePromise = FakePromise\n\nstringifyArg = (arg) ->\n  if arg instanceof RawFakePromise\n    \"FakePromise##{arg.id}\"\n  else if arg instanceof Error\n    \"#{arg.name}(#{JSON.stringify arg.message})\"\n  else if typeof arg is \"function\"\n    \"function #{arg.name or \"unnamed\"}\"\n  else\n    JSON.stringify arg\n\nif process.env.hasOwnProperty \"DEBUG\"\n  # enable crazy debug logs\n  FakePromise = new Proxy RawFakePromise, new LoggingProxyHandler RawFakePromise\n\n"
  ]
}